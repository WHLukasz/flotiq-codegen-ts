/* tslint:disable */
/* eslint-disable */
/* Flotiq customised */
export * from './runtime{{importFileExtension}}';
{{#useSagaAndRecords}}
export * from './runtimeSagasAndRecords{{importFileExtension}}';
export * from './ApiEntitiesRecord{{importFileExtension}}';
export * from './ApiEntitiesReducer{{importFileExtension}}';
export * from './ApiEntitiesSelectors{{importFileExtension}}';
{{/useSagaAndRecords}}
{{#apiInfo}}
{{#apis.0}}
export * from './apis/index{{importFileExtension}}';
{{/apis.0}}
{{/apiInfo}}
{{#models.0}}
export * from './models/index{{importFileExtension}}';
{{/models.0}}

import * as runtime from './runtime{{importFileExtension}}';
import * as Api from './apis/index{{importFileExtension}}';

const hydrateMiddleware =  async ctx => {
    
    if(ctx.init.method == 'GET'){

      if(ctx.url.indexOf('?') >0){
        ctx.url = ctx.url + '&hydrate=1';
      } else{
        ctx.url = ctx.url + '?hydrate=1';
      }

    }

    return {
        ...ctx,
        init: {
            ...ctx.init,
        }
    }
};

export class FlotiqApi {
    {{#apiInfo}}
    {{#apis}}
    {{#operations}}
    public {{ classname }} : Api.{{ classFilename }};
    {{/operations}}
    {{/apis}}
    {{/apiInfo}}

    constructor(key){
        const configParameters: runtime.ConfigurationParameters = {
            apiKey: key
        };
        const configuration = new runtime.Configuration(configParameters);
        {{#apiInfo}}
        {{#apis}}
        {{#operations}}
        this.{{ classFilename }} = new Api.{{ classFilename }}(configuration);
        this.{{ classFilename }} = this.{{ classFilename }}.withPreMiddleware( hydrateMiddleware );
        {{/operations}}
        {{/apis}}
        {{/apiInfo}}
    }
}